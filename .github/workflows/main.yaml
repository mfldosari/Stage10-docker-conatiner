name: Secure Pipeline
on:
  push:
    branches:
      - main
    paths:
      - '**'
      - '.github/workflows/main.yml'

  workflow_dispatch:
env:
  KEY_VAULT_NAME: ${{ secrets.KEY_VAULT_NAME }}

jobs:
  Test-Python-for-vulnerability:
    name: Scan Python files for vulnerability
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Bandit and scan code
        run: |
          pip install bandit
          bandit -r . --severity-level high


  Dependencies-Security-Check:
    runs-on: ubuntu-latest
    name: Check for vulnerable dependencies
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install -r project/requirements.txt && pip install -r project/requirements.vm.txt

      - name: Install and run pip-audit
        run: |
          pip install pip-audit
          pip-audit

  Build-Docker-Image:
    runs-on: ubuntu-latest
    name: Build and Scan Docker image

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t python-backend:latest ./project
      

      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: python-backend:latest
          format: table
          ignore-unfixed: true


  Notify-Slack:
    name: Notify Slack
    runs-on: ubuntu-latest
    needs:
      - Test-Python-for-vulnerability
      - Dependencies-Security-Check
      - Build-Docker-Image
      
    if: always()  # Always run this job, even if previous jobs fail
    steps:
      - name: Send Slack Notification
        run: |
          if [ "${{ needs.Test-Python-for-vulnerability.result }}" == "success" ] &&
             [ "${{ needs.Dependencies-Security-Check.result }}" == "success" ] &&
             [ "${{ needs.Build-Docker-Image.result }}" == "success" ]; then
            MESSAGE="Secure Pipeline, rest assure Team, i also have pushed the code to production, thanks for relying on me, i won't disappoint you."
          else
            MESSAGE="Secure Pipeline failed. Check GitHub Actions logs. and don't worry i have not pushed the code to production. security is my first priority."
          fi

          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"$MESSAGE\"}" \
            ${{ secrets.SLACK_WEBHOOK_URL }}
            
  build-and-deploy-image:
    runs-on: ubuntu-latest
    name: Build and Deploy Docker Image to Azure Container Apps
    needs:
      - Test-Python-for-vulnerability
      - Dependencies-Security-Check
      - Build-Docker-Image
      - Notify-Slack
    if: |
      needs.Test-Python-for-vulnerability.result == 'success' &&
      needs.Dependencies-Security-Check.result == 'success' &&
      needs.Build-Docker-Image.result == 'success'
    permissions: 
      id-token: write #This is required for requesting the OIDC JWT Token
      contents: read #Required when GH token is used to authenticate with private repo

    steps:
      - name: Checkout to the branch
        uses: actions/checkout@v2

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.FASTAPIAPPCON_AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.FASTAPIAPPCON_AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.FASTAPIAPPCON_AZURE_SUBSCRIPTION_ID }}

      - name: Build and push container image to registry
        uses: azure/container-apps-deploy-action@v2
        with:
          appSourcePath: ${{ github.workspace }}/project
          _dockerfilePathKey_: _dockerfilePath_
          registryUrl: dockerregistry643.azurecr.io
          registryUsername: ${{ secrets.FASTAPIAPPCON_REGISTRY_USERNAME }}
          registryPassword: ${{ secrets.FASTAPIAPPCON_REGISTRY_PASSWORD }}
          containerAppName: fastapi-app-con
          resourceGroup: tr-stage10-rg
          imageToBuild: dockerregistry643.azurecr.io/fastapi-app-con:${{ github.sha }}
          _buildArgumentsKey_: |
            _buildArgumentsValues_