name: Secure Pipeline
on:
  push:
    branches:
      - main
  workflow_dispatch:
env:
  KEY_VAULT_NAME: ${{ secrets.KEY_VAULT_NAME }}
  
jobs:
  Test-Python-for-vulnerability:
    name: Scan Python files for vulnerability
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Bandit and scan code
        run: |
          pip install bandit
          bandit -r . || true

  Dependencies-Security-Check:
    runs-on: ubuntu-latest
    name: Check for vulnerable dependencies
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Install and run pip-audit
        run: |
          pip install pip-audit
          pip-audit || true

  Build-Docker-Image:
    runs-on: ubuntu-latest
    name: Build and Scan Docker image

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t python-backend:latest ./project
      

      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: python-backend:latest
          format: table
          ignore-unfixed: true


  Notify-Slack:
    name: Notify Slack
    runs-on: ubuntu-latest
    needs:
      - Test-Python-for-vulnerability
      - Dependencies-Security-Check
      - Build-Docker-Image
    if: always()  # Always run this job, even if previous jobs fail
    steps:
      - name: Send Slack Notification
        run: |
          if [ "${{ needs.Test-Python-for-vulnerability.result }}" == "success" ] &&
             [ "${{ needs.Dependencies-Security-Check.result }}" == "success" ] &&
             [ "${{ needs.Build-Docker-Image.result }}" == "success" ]; then
            MESSAGE="Secure Pipeline, rest assure Team, i also have pushed the code to production, thanks for relying on me, i won't disappoint you."
          else
            MESSAGE="Secure Pipeline failed. Check GitHub Actions logs."
          fi

          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"$MESSAGE\"}" \
            ${{ secrets.SLACK_WEBHOOK_URL }}
